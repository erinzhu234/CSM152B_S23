/******************************************************************************/
/*                                                                            */
/* main.c -- Demo project for the PmodOLED IP                                 */
/*                                                                            */
/******************************************************************************/
/* Author: Arthur Brown                                                       */
/* Copyright 2016, Digilent Inc.                                              */
/******************************************************************************/
/* File Description:                                                          */
/*                                                                            */
/* This demo_project initializes and uses the PmodOLED to display strings     */
/* and show different available fill patterns.                                */
/*                                                                            */
/* In order to properly quit the demo, a serial terminal application should   */
/* be connected to your board over UART at the appropriate Baud rate, as      */
/* specified below.                                                           */
/*                                                                            */
/******************************************************************************/
/* Revision History:                                                          */
/*                                                                            */
/*    06/20/2016(ArtVVB):   Created                                           */
/*    12/15/2016(jPeyron):  Edited for better use for OnboardOLED in, as well */
/*                          as inverting the white and black                  */
/*    08/25/2017(ArtVVB):   Added proper cache management functions           */
/*    02/17/2018(atangzwj): Validated for Vivado 2017.4                       */
/*                                                                            */
/******************************************************************************/
/* Baud Rates:                                                                */
/*                                                                            */
/*    Microblaze: 9600 or what was specified in UARTlite core                 */
/*    Zynq: 115200                                                            */
/*                                                                            */
/******************************************************************************/

/* ------------------------------------------------------------ */
/*                  Include File Definitions                    */
/* ------------------------------------------------------------ */

#include <stdio.h>
#include "PmodOLED.h"
#include "sleep.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "PmodGYRO.h"

/* ------------------------------------------------------------ */
/*                  Global Variables                            */
/* ------------------------------------------------------------ */

PmodOLED myDevice1;
PmodGYRO myDevice2;
/* ------------------------------------------------------------ */
/*                  Forward Declarations                        */
/* ------------------------------------------------------------ */

void DemoInitialize();
void DemoRun();
void DemoCleanup();
void EnableCaches();
void DisableCaches();

// To change between PmodOLED and OnBoardOLED is to change Orientation
const u8 orientation = 0x0; // Set up for Normal PmodOLED(false) vs normal
                            // Onboard OLED(true)
const u8 invert = 0x0; // true = whitebackground/black letters
                       // false = black background /white letters

/* ------------------------------------------------------------ */
/*                  Function Definitions                        */
/* ------------------------------------------------------------ */

int main() {
   DemoInitialize();
   DemoRun();
   DemoCleanup();

   return 0;
}

void DemoInitialize() {
   EnableCaches();
   OLED_Begin(&myDevice1, XPAR_PMODOLED_0_AXI_LITE_GPIO_BASEADDR,
         XPAR_PMODOLED_0_AXI_LITE_SPI_BASEADDR, orientation, invert);
   GYRO_begin(&myDevice2, XPAR_PMODGYRO_0_AXI_LITE_SPI_BASEADDR,
            XPAR_PMODGYRO_0_AXI_LITE_GPIO_BASEADDR);

      // Set Threshold Registers
      GYRO_setThsXH(&myDevice2, 0x0F);
      GYRO_setThsYH(&myDevice2, 0x0F);
      GYRO_setThsZH(&myDevice2, 0x0F);

      GYRO_enableInt1(&myDevice2, GYRO_INT1_XHIE);    // Threshold interrupt
      GYRO_enableInt2(&myDevice2, GYRO_REG3_I2_DRDY); // Data Rdy/FIFO interrupt
}


void DemoRun() {
	//oled vars
   int irow, ib, i;
   u8 *pat;
   char c;

   //gyro vars
   int16_t xAxis = 0;
      int16_t yAxis = 0;
      int16_t zAxis = 0;
      int8_t temp = 0;
      int trig = 0;

   xil_printf("UART and SPI opened for PmodOLED Demo\n\r");

   while (1) {
	   //gyro
	   usleep(500000);

	         if (GYRO_Int1Status(&myDevice2) != 0) {
	            xil_printf("\x1B[2J");
	            xil_printf("\x1B[H");
	            xil_printf("Threshold reached\n\r");
	            trig = 1;
	         }
	         if (GYRO_Int2Status(&myDevice2) != 0) {
	            if (trig == 1) {
	               trig = 0;
	            } else {
	               xil_printf("\x1B[2J"); // Clear screen
	               xil_printf("\x1B[H");  // Reset cursor to 0,0
	            }
	            xil_printf("Data is ready\n\r\n\r");
	         }
	   //oled
      xil_printf("entering loop\r\n");
      // Choosing Fill pattern 0
      pat = OLED_GetStdPattern(0);
      OLED_SetFillPattern(&myDevice1, pat);
      // Turn automatic updating off
      OLED_SetCharUpdate(&myDevice1, 0);

      // Draw a rectangle over writing then slide the rectangle down slowly
      // displaying all writing
      for (irow = 0; irow < OledRowMax; irow++) {
    	  xAxis = GYRO_getX(&myDevice2);
    	  	            yAxis = GYRO_getY(&myDevice2);
    	  	            zAxis = GYRO_getZ(&myDevice2);
    	  char c[] = "x axis: ";
    	  char x[10];
    	  sprintf(x, "0x%04x", xAxis);
    	  strcat(c, x);
    	  OLED_ClearBuffer(&myDevice1);
         OLED_SetCursor(&myDevice1, 0, 0);
         OLED_PutString(&myDevice1, c);
         OLED_SetCursor(&myDevice1, 0, 1);
         OLED_PutString(&myDevice1, "y axis: ");
         OLED_SetCursor(&myDevice1, 0, 2);
         OLED_PutString(&myDevice1, "z axis: ");

         pat = OLED_GetStdPattern(1);
		 OLED_SetFillPattern(&myDevice1, pat);
         OLED_MoveTo(&myDevice1, 0, 10);
	     OLED_FillRect(&myDevice1, 30, 40);
	     OLED_DrawRect(&myDevice1, 30, 40);

         OLED_Update(&myDevice1);
         usleep(100000000);
      }
//
//      sleep(1);
//      // Blink the display three times.
//      for (i = 0; i < 3; i++) {
//         OLED_DisplayOff(&myDevice1);
//         usleep(500000);
//         OLED_DisplayOn(&myDevice1);
//         usleep(500000);
//      }
//      sleep(2);
//
//      // Now erase the characters from the display
//      for (irow = OledRowMax - 1; irow >= 0; irow--) {
//         OLED_SetDrawColor(&myDevice1, 1);
//         OLED_SetDrawMode(&myDevice1, OledModeSet);
//         OLED_MoveTo(&myDevice1, 0, irow);
//         OLED_LineTo(&myDevice1, 127, irow);
//         OLED_Update(&myDevice1);
//         usleep(25000);
//         OLED_SetDrawMode(&myDevice1, OledModeXor);
//         OLED_MoveTo(&myDevice1, 0, irow);
//         OLED_LineTo(&myDevice1, 127, irow);
//         OLED_Update(&myDevice1);
//      }
//
//      sleep(1);
//
//      // Draw a rectangle in center of screen
//      // Display the 8 different patterns available
//      OLED_SetDrawMode(&myDevice1, OledModeSet);
//
//      for (ib = 1; ib < 8; ib++) {
//         OLED_ClearBuffer(&myDevice1);
//         pat = OLED_GetStdPattern(ib);
//         OLED_SetFillPattern(&myDevice1, pat);
//         OLED_MoveTo(&myDevice1, 55, 1);
//         OLED_FillRect(&myDevice1, 75, 27);
//         OLED_DrawRect(&myDevice1, 75, 27);
//         OLED_Update(&myDevice1);
//
//         sleep(1);
//      }

#ifdef __MICROBLAZE__
      c = 'q';
#else
      xil_printf("(q)uit or any key to continue:\n\r");
      c = inbyte();
#endif

      if (c == 'q' || c == 'Q')
         break;
   }
   xil_printf("Exiting PmodOLED Demo\n\r");
}

void DemoCleanup() {
   OLED_End(&myDevice1);
   GYRO_end(&myDevice2);
   DisableCaches();
}

void EnableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheEnable();
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheEnable();
#endif
#endif
}

void DisableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheDisable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheDisable();
#endif
#endif
}
